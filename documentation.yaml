swagger: '2.0'
info:
  version: '1.0.0'
  title: 'BudgetBonsai API'
  description: 'API for managing user transactions'
basePath: '/api'
schemes:
  - 'http'
consumes:
  - 'application/json'
produces:
  - 'application/json'
securityDefinitions:
  jwt:
    type: 'apiKey'
    name: 'Authorization'
    in: 'header'
paths:
  /login:
    post:
      tags:
        - 'auth'
      summary: 'Logs in the user with their Google account, with the given authentication code'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'The authorization code of the user obtained from Google'
          required: true
          schema:
            type: 'object'
            properties:
              code:
                type: 'string'
      responses:
        200:
          description: 'Successful operation'
          schema:
            type: 'object'
            properties:
              sessionToken:
                type: 'string'
                description: 'Token to use for authentication'
        401:
          description: 'Invalid authorization code'
        500:
          description: 'Server error'
  /transactions:
    get:
      tags:
        - 'transactions'
      summary: 'Gets all the transactions of the user'
      produces:
        - 'application/json'
      security:
        - jwt: []
      responses:
        200:
          description: 'Successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Transaction'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server error'
    post:
      tags:
        - 'transactions'
      summary: 'Adds a new transaction for the user'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      security:
        - jwt: []
      parameters:
        - in: 'body'
          name: 'body'
          description: 'The transaction to be added'
          required: true
          schema:
            $ref: '#/definitions/Transaction'
      responses:
        201:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/Transaction'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server error'
    put:
      tags:
        - 'transactions'
      summary: 'Updates an existing transaction'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      security:
        - jwt: []
      parameters:
        - in: 'path'
          name: 'id'
          description: 'The ID of the transaction to be updated'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'The updated transaction'
          required: true
          schema:
            $ref: '#/definitions/Transaction'
      responses:
        200:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/Transaction'
        401:
          description: 'Unauthorized'
        404:
          description: 'Transaction not found'
        500:
          description: 'Server error'
    delete:
      parameters:
        - in: 'path'
          name: 'id'
          description: 'The ID of the transaction to be deleted'
          required: true
          type: 'string'
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Unauthorized'
        404:
          description: 'Transaction not found'
        500:
          description: 'Server error'
  /categories:
    get:
      tags:
        - 'categories'
      summary: 'Gets all the categories of the user'
      produces:
        - 'application/json'
      security:
        - jwt: []
      responses:
        200:
          description: 'Successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Category'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server error'
    post:
      tags:
        - 'categories'
      summary: 'Adds a new category for the user'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      security:
        - jwt: []
      parameters:
        - in: 'body'
          name: 'body'
          description: 'The category to be added'
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        201:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/Category'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server error'
    put:
      tags:
        - 'categories'
      summary: 'Updates an existing category'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      security:
        - jwt: []
      parameters:
        - in: 'path'
          name: 'id'
          description: 'The ID of the category to be updated'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'The updated category'
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        200:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/Category'
        401:
          description: 'Unauthorized'
        404:
          description: 'Category not found'
        500:
          description: 'Server error'
    delete:
      parameters:
        - in: 'path'
          name: 'id'
          description: 'The ID of the category to be deleted'
          required: true
          type: 'string'
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Unauthorized'
        404:
          description: 'Category not found'
        500:
          description: 'Server error'